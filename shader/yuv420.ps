
Texture2D shaderTexture;
SamplerState SampleType;
 
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
};

/*
float3 yuv_to_rgb2(float3 YUV)
{
	float y = YUV.x;
	float u = YUV.y;
	float v = YUV.z;

	float r = y + 1.13983 * v;
	float g = y - 0.39465 * u - 0.58060 * v;
	float b = y + 2.03211 * u;

	return float3(r, g, b);
}

float4 PS(PixelInputType input) : SV_TARGET
{  
	// 这个算法 渲染出来的色彩有点暗淡 饱和度下降
    float4 yuva = shaderTexture.Sample(SampleType, input.tex);  
	yuva -= float4(0, 0.5f, 0.5f, 0); 
	return float4(yuv_to_rgb2(yuva.xyz), 1.f); 
}
*/

static const float3 R_cf = float3(1.164383, 0.000000, 1.596027);
static const float3 G_cf = float3(1.164383, -0.391762, -0.812968);
static const float3 B_cf = float3(1.164383, 2.017232, 0.000000);
static const float3 offset = float3(-0.0625, -0.5, -0.5);

float4 PS(PixelInputType input) : SV_TARGET
{ 
	// 这个算法 渲染出来的色彩饱和度 比前面的算法好 
    float4 yuva = shaderTexture.Sample(SampleType, input.tex);   
	float3 yuv = float3(yuva.xyz) + offset;
	return float4(dot(yuv, R_cf), dot(yuv, G_cf), dot(yuv, B_cf), 1.0);
}